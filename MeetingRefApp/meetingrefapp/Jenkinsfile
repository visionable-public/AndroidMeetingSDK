#!groovy
//
// Job: Android-MeetingReferenceApp
//
// Build the Android Meeting Reference App
//

@Library('shared-libs') _

pipeline {
    agent {
        label 'hana.iocom.com'
    }

    triggers {
        upstream (
            upstreamProjects: """
                Android-MeetingSDK/${BRANCH_NAME}
            """,
            threshold: hudson.model.Result.SUCCESS
        )
    }

    tools {
  		jdk "jdk-16"
  	}
    
    environment {
        COMPONENT = "MeetingSDK"

        BUILD_YEAR = VersionNumber([
            versionNumberString: '${BUILD_YEAR}',
            worstResultForIncrement: 'SUCCESS'
        ])

        BUILD_MONTH = VersionNumber([
            versionNumberString: '${BUILD_MONTH,X}',
            worstResultForIncrement: 'SUCCESS'
        ])

        BUILD_DAY = VersionNumber([
            versionNumberString: '${BUILD_DAY,X}',
            worstResultForIncrement: 'SUCCESS'
        ])

        BUILDS_TODAY = VersionNumber([
            versionNumberString: '${BUILDS_TODAY}',
            worstResultForIncrement: 'SUCCESS'
        ])

        BUILD_VERSION = "${BUILD_YEAR}.${BUILD_MONTH}.${BUILD_DAY}.${BUILDS_TODAY}"

        // hana-keystore.jks (Hana Keystore)
        KEYSTORE = credentials("e8d43e7e-ba60-4c21-a5cf-16406d119014")
    }

    options {
        // timestamps in build logs
        timestamps()
        
        // build log rotation
        buildDiscarder(logRotator(numToKeepStr: '30'))
        
        // build timeout
        timeout(time: 30, unit: 'MINUTES')

        disableConcurrentBuilds()

        // colorize log output when a step is formatted
        ansiColor('xterm')

        // skip the default "Declarative: Checkout SCM" step
        skipDefaultCheckout()
    }

    stages {
        stage('Checkout') {
            steps {
                // handle long filenames
                bat """
                    git config --global core.longpaths true
                """

                checkout (
                    changelog: true,
                    poll: true,
                    scm: [
                        $class: 'GitSCM',
                        branches: [[name: "*/${BRANCH_NAME}"]],
                        extensions: [
                            [
                                $class: 'CloneOption',
                                timeout: 20
                            ],
                            [
                                $class: 'CheckoutOption',
                                timeout: 20
                            ],
                            [
                                $class: 'CleanBeforeCheckout'
                            ],
                            [
                                $class: 'SparseCheckoutPaths',
                                sparseCheckoutPaths: [
                                    [path: "BinaryAssets"],
                                    [path: "Meeting/Android"]
                                ]
                            ]
                        ],
                        userRemoteConfigs: [[
                            credentialsId: 'jenkins-codecommit',
                            url: 'ssh://APKA4UQ5BCDAVVRQAJX4@git-codecommit.us-east-1.amazonaws.com/v1/repos/MOBILE'
                        ]]
                    ]
                )
            }
        }

        stage('Init') {
            steps {
                script {
                    currentBuild.displayName = "${BUILD_VERSION}"

                    logInfo()
                }
            }
        }

        stage('Build') {
            steps {
                copyArtifacts([
                    projectName: "Android-MeetingSDK/${BRANCH_NAME}",
                    filter: '**/meetingsdk-*.aar',
                    target: "${WORKSPACE}\\Meeting\\Android\\visidroid\\MeetingSDK",
                    selector: lastSuccessful(),
                    flatten: true,
                    fingerprintArtifacts: true
                ])

                powershell '''
                    \$ErrorActionPreference = "Stop"

                    New-Item -Path $env:WORKSPACE -Name "IGAudio\\igaudio_android" -Force -ItemType "directory"
                    New-Item -Path $env:WORKSPACE -Name "IGVideo\\igvideo_android" -Force -ItemType "directory"

                    echo "<<< copy binaries to staging folders >>>"
                    Copy-Item -Force \
                        $env:WORKSPACE\\BinaryAssets\\IGAudio\\lib\\android\\libigaudio.so \
                        -Destination $env:WORKSPACE\\IGAudio\\igaudio_android
                    Copy-Item -Force \
                        $env:WORKSPACE\\BinaryAssets\\IGVideo\\lib\\android\\libigvideo.so \
                        -Destination $env:WORKSPACE\\IGVideo\\igvideo_android

                    echo "<<< Unpack latest SDK >>>"
                    pushd "$env:WORKSPACE\\Meeting\\Android\\visidroid\\MeetingSDK"
                    move -force *.aar meetingsdk.aar

                    echo "<<< Get Keystore >>>"
                    New-Item -Path $env:WORKSPACE -Name "Installs\\License-BuildFiles\\KeyStores" -Force -ItemType "directory"
                    Copy-Item -Force $env:KEYSTORE -Destination $env:WORKSPACE\\Installs\\License-BuildFiles\\KeyStores\\hana-keystore.jks
                '''

                bat """
                    set ANDROID_SDK_HOME=%USERPROFILE%\\AppData\\Local\\Android\\Sdk
                    set ANDROID_SDK_ROOT=%ANDROID_SDK_HOME%
                    set ANDROID_NDK_HOME=%ANDROID_SDK_HOME%\\ndk\\20.0.5594570
                    set PATH=%ANDROID_SDK_HOME%\\cmake\\3.10.2.4988404\\bin;%PATH%

                    cd ${WORKSPACE}\\Meeting\\Android\\visidroid\\meetingrefapp

                    echo "<<< gradlew clean >>>"
                    call ..\\gradlew.bat clean

                    echo "<<< gradlew build >>>"
                    call ..\\gradlew.bat assembleRelease
                    call ..\\gradlew.bat assembleDebug
                """

                // Android O2 View Cert
                signAndroidApks (
                    apksToSign: 'Meeting\\Android\\visidroid\\meetingrefapp\\**\\meetingrefapp-release-unsigned.apk',
                    keyAlias: 'o2view',
                    keyStoreId: 'o2view',
                    archiveSignedApks: true,
                    zipalignPath: 'C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\build-tools\\30.0.3'
                )
            }
        }

        stage('Archive') {
            steps {
                powershell """
                    \$ErrorActionPreference = "Stop"

                    pushd "\$env:WORKSPACE\\Meeting\\Android\\visidroid\\meetingrefapp\\build\\outputs\\apk\\release"

                    Rename-Item -Path "meetingrefapp-release.apk" -NewName "meetingrefapp-\$env:BUILD_VERSION.apk"
                    Get-ItemProperty -Path .\\meetingrefapp-*.apk | Format-list -Property * -Force

                    pushd "..\\debug"
                    Get-ItemProperty -Path .\\meetingrefapp-debug.apk | Format-list -Property * -Force
                """

                withCredentials([aws(credentialsId: 'AlphaBetaRelease-Manager', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        powershell '''
                            \$ErrorActionPreference = "Stop"

                            echo "<<< S3 Upload >>>"
                            aws configure set aws_access_key_id $env:AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $env:AWS_SECRET_ACCESS_KEY
                            aws s3 cp $env:WORKSPACE\\Meeting\\Android\\visidroid\\meetingrefapp\\build\\outputs\\apk\\release\\meetingrefapp-$env:BUILD_VERSION.apk s3://dev-visionable-com/Android/MeetingRefApp/
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                setEmailVars()
                sendEmail()
            }
        }
    }
}